######################
# Jonah Landry (Python 3)
# 5/8/2020
# Implementing the Time Lock Algorthim to run from command line in python
######################

#Imports
#Used for:
# datetime.strftime("%Y %m %d %H %M %S") which returns a string using the given datetime
# datetime.now() which gets the current time in datetime format
from datetime import *

#Used for:
# md5(string.encode()) which takes a string and encodes it into an md5 hash
# hash.hexdigest() which takes the hash and returns a string representation of it that we can then manipulate
from hashlib import *

#Used for:
# gives input from the command line
import sys

#Functions

#Hashes a string twice and returns the resulting value as a string using md5
def doubleHash(targetString):
    #doubleHashed works as a temporary variable to store the initial hash generated by the inbuilt md5 function
    # tempHash holds the hash itself, which when printed gives the location in memory so it needs to be
    # turned into a string representative via hexdigest(). The hexdigest() of the second hash is returned by the end.
    tempHash = md5(targetString.encode())
    doubleHashed = tempHash.hexdigest()
    tempHash = md5(doubleHashed.encode())
    return tempHash.hexdigest()

#Adjusts the time for daylight savings
def daylight(givenTime):
    #Creates a string so that we only get the date and the month of the datetime, which is all we care about for adjustments
    dateString = givenTime.strftime("%d-%m")
    strippedDate = datetime.strptime(dateString, "%d-%m")

    #Sets time for the start and end of DL savings
    dlStart = datetime.strptime("3-8","%d-%m")
    dlEnd = datetime.strptime("11-1", "%d-%m")

    #If it's in range, add an hour
    if dlStart <= strippedDate <= dlEnd:
        givenTime = givenTime + timedelta(hours=1)
    return givenTime
#Generates a code by taking the first two letters left to right and then the first two integers from right to left
# from a given string
def genCode(givenString):


    #first looks for the alphabetics by comparing givens to the alphabet
    #Initializing variables
    code = ''
    found = 0
    alph = "abcdefghijklmnopqrstuvwxyz"
    i = 0
    i2 = 0
    #Iterates through the given code and compares it to the alphabet
    while (i < len(givenString) and found < 2):
        while i2 < len(alph):
            if givenString[i] == alph[i2]:
                code = code + str(givenString[i])
                found = found + 1
            i2 = i2 +1
        i = i + 1
        i2 = 0

    #Then looks for any numbers using the same method, only iterating from reverse
    integers = "0123456789"
    i = len(givenString) - 1
    found = 0

    #Iterates in reverse
    while (i >= 0 and found < 2):
        while i2 < len(integers):
            if givenString[i] == integers[i2]:
                code = code + str(givenString[i])
                found = found + 1
            i2 = i2 + 1
        i = i - 1
        i2 = 0

    return code + givenString[(len(givenString) - 1)//2]

#Calculate the time elapsed in seconds of current system time
currTime = datetime.now()
currTime = daylight(currTime)
strTime = currTime.strftime("%Y %m %d %H %M %S")


#Takes an input from command line, converts it to a string, then to a datetime to be calculated
arguments = sys.argv[1:]
arguList = " ".join(arguments)
try:
    givenTime = datetime.strptime(arguList, "%Y %m %d %H %M %S")
    givenTime = daylight(givenTime)
    timeDif = currTime - givenTime
    interval = timedelta(seconds = currTime.second)
    timeDif = timeDif - interval
    difSec = str(int(timeDif.total_seconds()))
    hashedSec = doubleHash(difSec)
    finalCode = genCode(hashedSec)
    print(finalCode)
except:
    print ("Invalid input, expected format of YEAR MONTH DAY HOUR MINUTE SECOND")

#Debug Prints
#print("Current time: ", strTime)
#print("Current timezone: ", currTime.tzinfo)
#print("Given time: ", arguList)
#print("Seconds hash: ", hashedSec)
#print("Difference in seconds: ", difSec)
#print("Generated code = ", finalCode)